Files in this folder
====================
-Change logs and checksum file
  changelog.day		GIT change log of each project since yesterday.
  changelog.week		GIT change log of each project since last week.
  changelog.biweek 	GIT change log of each project since 2 weeks ago.
  changelog.month		GIT change log of each project since a month ago.

  checksums.md5		This file contains the MD5 checksum for above binary files. After downloading all the files, type "md5sum -c checksums.md5" can help you verify if the downloaded files are ok.

-Source codes
  manifest.xml		Saving the GIT commit number of each project used in this build.
  kernel_src.tgz	Kernel source code tar ball.
  droid_src.tgz		Android source code tar ball without code of Marvell developed application.
  drivers_src.tgz	Source code tar ball for drivers, such as gc, wifi etc
  boot_src.tgz		Uboot and OBM source code tar ball

-droid-gcc folder
 Files under droid-gcc folder are built with android-toolchain.
 If this folder is missing, it means that this package wasn't built with marvell gcc toolchain.

-mrvl-gcc folder
 Files under mrvl-gcc folder are built with marvell gcc toolchain.
 If this folder is missed, it means that this package wasn't built with marvell gcc toolchain.
 
-Kernel and Modules for Android
  zImage.android.mlc	we will use one kernel binary solution, finally we only provide one kernel image. TODO: change autobuild scripts to do it.
  zImage.android.mmc	

  modules_android_mlc.tgz Kernel modules that built along with zImage.android.mlc
  modules_android_mmc.tgz Kernel modules that built along with zImage.android.mmc

  root_android_mlc.tgz	The root directory used to build zImage.android.mlc

-Kernel and Modules for Maemo
  zImage.maemo.mlc	Kernel image to boot Maemo from MLC.
  modules_maemo_mlc.tgz	Kernel modules that built along with zImage.maemo.mlc

-Android File Systems
  root_nfs_xxx.tgz		Android root file system that can be run on SD card or NFS. Be notes, modules in modules_android_mmc.tgz are used in this package. 
 
  system_ubi_xxx.img		Android system image for UBI file system.
  userdata_ubi_xxx.img	    Android userdata image for UBI file system.

  if xxx is "internal" means everything is built in the package, and should be used internally.

  if xxx is "external" means the package can be delivered outside, components with license issue has been removed. Currently helix and adobe flash is removed.

-Extra Libraries
   helix.tgz    Helix libraries. Refer to below for installing helix libraries.
   flash.tgz    Adobe Flash plugin library. Refer to below for installing adobe flash plugin.

Install Helix Libraries
=======================
. Android is running from SD card
  a) plug the SD card to a PC
  b) untar helix.tgz and copy files to /system/lib/helix/

. Android is running from MLC nand
  a) untar helix.tgz
  b) adb shell
  c) su; mount -o remount ubi0_0 /system;
  d) mkdir /system/lib/helix; exit
  e) cd <helix folder>;
  f) for file in $(ls); do adb push $(file) /system/lib/helix/; done

Notes:If you are using Windows host, you can install the cygwin which has the capability to run the last shell script.
   Or you can put the below lines into a BAT file:
   
   @echo off
   FOR %%file in (*.*) DO adb push "%%file" /system/lib/helix/

   You should run the BAT file in the folder where helix libraries locate.

Install Adobe Flash plugin
==========================
. Android is running from SD card
  a) plug the SD card to a PC
  b) untar flash.tgz and copy files to /system/lib/netscape/

. Android is running from MLC nand
  a) untar flash.tgz
  b) adb shell
  c) su; mount -o remount ubi0_0 system;
  d) mkdir /system/lib/netscape; exit
  d) adb push libflashplayer.so /system/lib/netscape/
  
Burning OBM and UBoot
=====================
1. install XDB 4.1.1 from: \\sh1sbak009\debugger_public\Engineering_Release\EMU_AddOn\EMU 2.1
2. Get binary from \\sh1sbak009\embedded_os\Temp\mhu4\eMMC
3. Burn OBM and U-boot by XDB
   1) Use flash burn tool: flash --> burn flash, use default config
   2) Initial a new flash
   3) Erase all blocks
   4) Make sure NOT select "erase affected blocks"
   5) Burn ntim_mmp2_nand_bbu_ddr.bin to 0x0
   6) Burn MMP2_JASPER_Loader_3_2_13.bin to 0x80000
   7) Burn WtmUnresetPJ4.bin to 0xc0000
   8) Burn u-boot.bin to 0x100000

Setup Android on NAND(emmc)
=========================

Boot the device with console

first burn zImage
MMP2>> sw
MMP2>> t zImage.android
MMP2>> nand erase 0x980000 0x300000
MMP2>> nand write 0x1100000 0x980000 0x300000

sencond, burning mbr, ramdisk, system and userdata img
MMP2>> t u-boot.bin.emmc
MMP2>> boot
MMP2>> t mbr
MMP2>> mmc write 0x4800 0x1 0x1100000
MMP2>> t ramdisk_ext2.img
MMP2>> mmc erase 0x6400 0x4000
MMP2>> mmc write 0x6400 0x4000 0x1100000
MMP2>> t system_ext2.img
MMP2>> mmc erase 0xA400 0x3C000
MMP2>> mmc write 0xA400 0X3C000 0X1100000
MMP2>> t userdata_ext2.img
MMP2>> mmc erase 0x46400 0x32000 0x1100000
MMP2>> mmc write 0x46400 0x32000 0x1100000 

when you done, power off mmp2, and power again to boot it from emmc.
Note : Reboot is not workable.

Setup Android on SD Card
========================
Follow the below process to make a SD card with Android root file system installed.
1) Plug a SD card to the PC
2) mkfs.ext3 /dev/sdc #your SD card maybe mounted at the other sd device, such as /dev/sdb
3) mount /dev/sdc /mnt/disk
4) tar xvf root_nfs.tgz /tmp; cp -p -r /tmp/root_nfs/* /mnt/disk/;
5) umount /dev/sdc

Second, burning the zImage.android.mmc image.
Boot the device with console,
MMP2>> sw         // Set the interface to u2o-eth
MMP2>> t zImage.android
MMP2>> nand erase 0x980000 0x300000
MMP2>> nand write 0x1100000 0x980000 0x300000 

Note : erase ramdisk first if you want to boot from sdcard


Setup Android on NFS
====================
1) Installed the NFS server on PC host.
2) mkdir /nfs and /nfs/android
3) add below line to /etc/exports
  /srv            *(rw,sync,no_root_squash,no_subtree_check)
  Notes: be sure you specify all the optional paramters above.
4) tar xvf root_nfs.tgz /tmp/
5) mv /tmp/root_nfs/* /nfs/android

Last, you should use zImage to boot the kernel and then set the bootargs variable in UBoot.
(Notes:if adb is enabled in the kernel, this way doesn't work as the usb net won't work as the usb is used for adb)

Avengers>>t zImage.android
Avengers>>bo

Note : erase ramdisk first if you want to boot from sdcard

Notes:we used one kernel binary solution, the boot sequence is nand --> mmc --> nfs, now nand is not supported, so remove sdcard first if you want to boot from nfs. And the nfs server is fixed as 192.168.1.100:/nfs/android. if you want to change it, modify vendor/marvell/jasper/roodir/rdinit and build the kernel again

Notes:You only need use setenv and savenv command one time. Next time UBoot will load the environment variable from NAND automaticllay. But later if you want use zImage.android.mmc to boot Android from SD card, you should clear the "bootargs" environment variable. You can do this by:



Known Issues about running Android on NFS
=========================================
+ Wifi can't be enabled if you are using UBuntu9.04 or higher
-------------------------------------------------------------
  Symptom: When you enabled the Wifi, use the logcat you can see a message "Error changing group ownership of wpa_supplicant.conf to 1001:Operation not permitted." This only happens if your host PC is running with UBuntu9.04. We tested UBuntu8.04 and UBuntu8.10, which doesn't have this issue.
  Reason: We don't know the exact reason why chown doesn't work on UBuntu9.04 but works on 8.04 or 8.10.

  Workaround:In the console, you can copy the wpa_supplicant.conf from /system/etc/wifi/wpa_supplicant.conf to /data/misc/wifi/wpa_supplicant.conf and chmod 777 wpa_supplicant.conf.


+ Calibration data can't be saved, any setting data can't be saved.
------------------------------------------------------------------
  Symptom: You calibrate the touch screen with Calibration app, and the screen works well. But at next boot, you have to calibrate it again. The calibration data isn't stored. 

  Reason: Actually the calibration data is saved to persistent property file. But just fail to read it from persistent property at boot. This seems a limitation of NFS file system on support opendir() function.

  Workaround: no workaround is available right now, just recalibrate it.


+Media on SD Card can't be seen by Video/Music/Photo App
------------------------------------------------------------
  Symptom: Plug the SD card to device, with media files on SD card, but Video/Music/Photo App can't see anything.
  Reason: Mounting SD card is disabled in root_nfs.tgz on purpose. As if Android is running on SD card, enable mounting of SD card may cause confliction. So by default we disable it in root_nfs.tgz. 
  Workaround:You can enable it manually by edit /system/etc/vold.conf, uncomment the section of volume_sdcard.

FAQ
=====
+Wifi can't be enabled if I use a zImage built at the other day.
----------------------------------------------------------------
The wifi kernel module in root_nfs.tgz or system_ubi.img may not comply with zImages built at the other day. Please use the zImage and root_nfs.tgz or system_ubi.img built at the same day.


+How can I disable GC300 copybit engine completely?
---------------------------------------------------
You can do this by: rm /system/lib/hw/copybit.default.so, so that Android GUI system won't use GC300 copybit engine. 
But the built-in media playback engine will still try to use GC300 copybit engine to do resizing and color conversion. Check the topic "How can I disable GC300 copybit engine on video playback?".

+How can I configure video output path?
---------------------------------------------------------------
The opencore,GStreamer and Helix engine uses the property video.accelerate.hw to determine the video output path.
If the property is set to 'gc', it will allocate memory from PMEM and expect GC to do color conversion.
If the property is set to 'overlay', it will use the overlay engine to output the video.
If it is other values, it will use software color conversion and let surfaceflinger to output the video frame.

+How to modify the files after the system_ubi.img has been burned to the flash?
-------------------------------------------------------------------------------
In the console mode, you can remount the /system folder by
$mount -o remount -t ubifs ubi0_0 /system

+How to enable the video playback profiling?
--------------------------------------------
After the android boot up, type in console:
$setprop enable.pvplayer.profiling 1
$logcat &

While playback a video clip, the profiling data will be output to console.

+How to enable the fake ac and battery status?
----------------------------------------------
If the battery service reports wrong battery status, Android power off the system automatically. You can use the below way to request battery service to report fake status to cheat android system.

Open /init.rc, add the below line before class_start default:
setprop battery.fake_ac true






