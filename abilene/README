Files in this folder
====================
-Change logs and checksum file
  changelog.build       GIT change log of each project since last build.
  changelog.day         GIT change log of each project since yesterday.
  changelog.week        GIT change log of each project since last week.
  changelog.biweek      GIT change log of each project since 2 weeks ago.
  changelog.month       GIT change log of each project since a month ago.

  checksums.md5 This file contains the MD5 checksum for above binary files. After downloading all the files, type "md5sum -c checksums.md5" can help you verify if the downloaded files are ok.

-Source codes
 --Internal Use
  manifest.xml          Saving the GIT commit number of each project used in this build. This is for internal use only.
  droid_all_src.tgz     Completing source code tar ball, including everything, such as kernel, uboot, obm, android. This is for internal use only.

 --External Uses: the below files will be in the release package. To restore the complete source code that is used to build this package, please follow the intructions in Release Notes.

  setup_android.sh  The script that is used to setup the code base of this build from the below tarball. For details about this, please refer to release notes.

  kernel_src.tgz        Kernel base source code tar ball.
  kernel_patches.tgz    Kernel patches that are applied on kernel base source.

  marvell_manifest.xml  The manifest file used to download base android source code from google.
  android_src.tgz       The source code of projects that are introduced by Marvell. Not including the projects introduced by Google.
  android_patches.tgz   The patches that applied to android projects introduced by Google.

  uboot_src.tgz         Uboot base source code tar ball.
  uboot_patches.tgz     The patches that applied to uboot base source.

  obm_src.tgz           OBM source code tar ball. Will be released.

-droid-gcc folder
 Files under droid-gcc folder are built with android-toolchain.
 If this folder is missing, it means that this package wasn't built with google gcc toolchain.

-Kernel and Modules for Android
  uImage.android           The kernel image for SMP mode
  uImage.up.android        The kernel image for no SMP mode
  modules_android_mmc.tgz  Kernel modules that built along with uImage.android

-Android File Systems
  root_nfs_xxx.tgz          Android root file system that can be run on SD card or NFS. Be notes, modules in modules_android_mmc.tgz are used in this package.

  ramdisk_ext3.img         Android ramdisk image.
  system_ext3.img          Android system image.
  userdata_ext.img         Android userdata image. 
  update_droid.zip         that is a update package including kernel, ramdisk and system folder.

  if xxx is "internal" means everything is built in the package, and should be used internally.

  if xxx is "external" means the package can be delivered outside, components with license issue has been removed.

How to get the 'latest' source code from git server
=====================================
  1. repo init -u ssh://shgit.marvell.com/git/android/platform/manifest -b abilene-gingerbread
  2. repo sync

How to get the code that autobuild system use for daily build or code drop
=====================================
-Method I
  1. $ mkdir my_droid_src
     $ cd my_droid_src
  2. $ repo init -u ssh://shgit.marvell.com/git/android/platform/manifest -b abilene-gingerbread
  3. copy 'manifest.xml' from autobuild system or code drop into my_droid_src/.repo/manifests/, name it as whatever you like, say 'my_manifest.xml'.
  4. In my_droid_src, run repo-init again as below
     $ repo init -m 'my_manifest.xml' # Don't need the full path of my_manifest.xml
  5. $ repo sync

-Method II
  1. Find out 'droid_all_src.tgz' in daily build or code drop.
  2. extract that tgz package as below.
     $ tar xzvf droid_all_src.tgz
  3. $ cd source # now you're in the source root.

How to get and build Uboot
=====================================
  1. Go to the diretory <android_working_dir>/boot
     $ cd my_droid_src/boot  # replace my_droid_src by the actual android source root on your machine
  2. Make uboot
     $ make all

How to build kernel and android image
=====================================
  1. build kernel and modules
     $ cd <android_working_dir>
     $ cd kernel
     $ make all

  uImage is located at kernel/out, modules is located at kernel/out/modules

  2. build android
     $ cd <android_working_dir>
     $ source build/envsetup.sh
     $ chooseproduct abilene
     $ export ANDROID_PREBUILT_MODULES=kernel/out/modules
     $ make

  The android ramdisk.img, system.img and userdata.img are located at out/target/product/abilene

Burning OBM and Uboot
=====================
1. Install the latest XDB with version 5.1
2. Get the boot binaries (uboot & obm) from autobuild server
3. Flash OBM and U-boot into EMMC using XDB
   1)Use flash burn tool: flash --> burn flash
   2)Choose flash: NAND Flash
   3)Erase All Blocks to erase the nand autoboot obm
   4)Choose flash: EMMC flash and click Detect button to detect emmc partition
   5)Choose partition 0x0
      a)Burn "primary_gpt_8g"                           address [0x0]
      b)Burn "secondary_gpt_8g"                         address [0x1d97fbe00]
      c)Burn "uImage.android"                           address [0x980000]
     Choose partition 0x1
      d)Burn "ntim_mmp3_v7_mp_emmc_dis_uboot.bin"       address [0x000000]
            ("ntim_mmp3_v7_mp_emmc_pop_uboot.bin" for pop board, CPU frequence 200M Hz)
            ("ntim_mmp3_v7_mp_emmc_dis_uboot.bin" for dis board, CPU frequence 200M Hz)
            ("ntim_mmp3_v7_mp_emmc_xxx_uboot_800.bin" for pop/dis board, CPU frequence 800M Hz)
            ("ntim_mmp3_v7_mp_emmc_xxx_uboot_1000.bin" for pop/dis board, CPU frequence 1G Hz)
      e)Burn "LoopSelf.bin"                             address [0x020000]
     Choose partition 0x2
      f)Burn "u-boot.bin"                               address [0x000000]

How to Disable GC2000
=====================
remove or rename egl.cfg which located in /system/lib/egl/

Boot up Android on eMMC
=====================================

Boot the device, and enter the uboot menu.

0) By default, the initial device is set to eMMC.
   You can run the following struction to make sure:
Abilene>> mfpch emmc

1) ramdisk
Abilene>> tftpboot 0x1100000 ramdisk_ext3.img
Abilene>> mmc write 0x1100000 0x8c00 0x4000

Please ignore only the following error, since it's not an actual error.
----------error begins----------------
Wrong Image Format for tftpboot command
ERROR: can't get kernel image
----------error ends----------------

2) system
Abilene>> tftpboot 0x1100000 system_ext3_internal.img
Abilene>> mmc write 0x1100000 0xcc00 0x4b000

3) user data
Abilene>> tftpboot 0x1100000 userdata_ext3_internal.img
Abilene>> mmc write 0x1100000 0x57c00 0x4b000

After done, power-off and power-on again to boot mmp3 from emmc.
