Files in this folder
====================
-Change logs and checksum file
  changelog.day		GIT change log of each project since yesterday.
  changelog.week	GIT change log of each project since last week.
  changelog.biweek 	GIT change log of each project since 2 weeks ago.
  changelog.month	GIT change log of each project since a month ago.

  checksums.md5		This file contains the MD5 checksum for above binary files. After downloading all the files, type "md5sum -c checksums.md5" can help you verify if the downloaded files are ok.

-Source codes
  manifest.xml		Saving the GIT commit number of each project used in this build.

-droid-gcc folder
 Files under droid-gcc folder are built with android-toolchain.
 If this folder is missing, it means that this package wasn't built with android  gcc toolchain.
 root_nfs_internal.tgz 	used for mmc and nfs case

-mrvl-gcc folder
 Files under mrvl-gcc folder are built with marvell gcc toolchain.
 If this folder is missed, it means that this package wasn't built with marvell gcc toolchain.
 
-OBM and UBoot
 
  u-boot.bin				uboot for dkb
  NTIM_OBM_UBOOT.bin			NTIM image
  TTC_LINUX_NTOBM.bin			NTLoader image
  Arbel.bin				CP Arbel image
  TTC1_M06_AI_A0_Flash.bin		CP MSA image
  
-Kernel and Modules for Android [Currently for TTC/TD, zImage.android.slc and zImage.android.mmc is same]
  zImage.android.slc	Kernel image to boot android from SLC. A root file system is built in. 
  zImage.android.mmc    Kernel image for mmc and nfs usage

-Android File Systems
  system.img		 Android system image for  file system.
  userdata.img		 Android userdata image for  file system.
  ramdisk.img		 Android root image for file system.
  pxafs.img		 AP telephony image.


ttc_dkb Flashing images and boot system (256MB is set as default)

Install OBM and Uboot
============================
1. install XDB EMU 2.1 from: \\sh1sbak009\Product_Integration\Tools\EMU 2.1, configuration file: ttc_ptap_mhk.xsf
2.Burn following binaries to flash by using the Marvell eXtreme Debugger.
	NTIM_OBM_UBOOT.bin 		--> flash address 0x00000
	TTC_LINUX_NTOBM.bin 		--> flash address 0x20000
	u-boot.bin			--> flash address 0x40000
	ramdisk.img			--> flash address 0xc0000
	Arbel.bin			--> flash address 0x120000
	TTC1_M06_AI_A0_Flash.bin	--> flash address 0x820000
	
Setup Android on OneNAND
===========================
1.Start your favorite terminal emulator with the appropriate 
      COM port set to 115200,8N1. Power on hte board and wait for TTC_DKB>> prompt to appear

2.Enter the following command to upload the kernel into the RAM and burn into flash:
For NAND flash, issue the following commands:
TTC_DKB>>onenand erase 0x920000 0x300000
TTC_DKB>>tftp 0x1000000 zImage
TTC_DKB>>onenand write 0x1000000 0x920000 0x300000
Note 1: All the following images should copy to the host tftp share directory:
	zImage
	system.img
	userdata.img
	pxafs.img
Note 2: You need to first input "sw" to switch to usb eth, and then, input "tftp 0x1000000 zImage", then connect the USB micro-line between the host PC and the dkbboard
Note 3: You need to configure the host network interface:
   # ifconfig usb0 192.168.1.100 
Note 4: If you want to boot from nand flash. You have to burn ramdisk. Otherwise if will boot from MMC or NFS
	You can burn ramdisk by tftp too.
TTC_DKB>>onenand erase 0xc0000 0x50000
TTC_DKB>>tftp 0x1000000 ramdisk
TTC_DKB>>onenand write 0x1000000 0xc0000 0x50000

3.Enter the following command to upload the system.img into the RAM and burn into flash:
For NAND flash, issue the following commands:
TTC_DKB>>onenand erase 0x0c20000 0x7000000
TTC_DKB>>tftp 0x1000000 system.img
TTC_DKB>>onenand write.yaffs 0x1000000 0x0c20000 <system.img actual length> (Note: ony hex supported)

4.Enter the following command to upload the userata.img into the RAM and burn into flash:
For NAND flash, issue the following commands:
TTC_DKB>>onenand erase 0x7c20000 0x7000000
TTC_DKB>>tftp 0x1000000 userdata.img
TTC_DKB>>onenand write.yaffs 0x1000000 0x7c20000 <userdata.img actual length> (Note: ony hex supported)

5.Enter the following command to upload the marvell data into the RAM and burn into flash:
For NAND flash, issue the following commands:
TTC_DKB>>onenand erase 0xec20000 0x1000000
TTC_DKB>>tftp 0x1000000  pxafs.img
TTC_DKB>>onenand write.yaffs 0x1000000 0xec20000 <pxafs.img actual length> (Note: ony hex supported)

6.How to setup nfs
1)  Burn all images except for ramdisk.img. [zImage.android.mmc can be used]
2)  Setup nfs on host. Host ip is 192.168.1.100 and android rootfs should be put to /nfs/android
3)  unzip root_nfs_internal.tgz to /nfs/android
4)  reboot


FAQ
=====
+Connection never proceeds beyond the "Verifying user name and password" stage in modem test
--------------------------------------------------------------------------------------------
Update your USB driver on windows PC to the newest version

+Device fail to boot-up, even without console output.
----------------------------------------------------------------
Please make sure ECN001 for "TTC DKB CORECAR V2" is applied, or un-plug the usb cable during boot-up stage

+Wifi can't be enabled if I use a zImage built at the other day.
----------------------------------------------------------------
The wifi kernel module in root_nfs.tgz or system.img may not comply with zImages built at the other day. Please use the zImage and root_nfs.tgz or system.img built at the same day.

+I2C error, and touch may not functional for MMI V2.0
---------------------------------------------------
Please remove camera sensor OV7670, which is located on MMI card

+Phone call is not functional with the auto build package
---------------------------------------------------
WIFI need to be powered on to enable CP phone call, please enable WIFI by "settings-> Wireless & networks -> WIFI(Turn on WIFI)", or directly power on WIFI from console "echo 1 > /sys/class/rfkill/rfkill0/state"

+How to disable GC500 completly
----------------------------------------------------------------
You can do this by: rm /system/lib/egl/egl.cfg, so android UI and 3D applications will use SW version instead of GC500. To save 16MB from GC500 low level driver, you can: rm /system/lib/modules/galcore.ko
