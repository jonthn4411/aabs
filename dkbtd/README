Files in this folder
====================
-Change logs and checksum file
  changelog.day		GIT change log of each project since yesterday.
  changelog.week	GIT change log of each project since last week.
  changelog.biweek 	GIT change log of each project since 2 weeks ago.
  changelog.month	GIT change log of each project since a month ago.
  changelog.build	GIT change log of each project since last build

  checksums.md5		This file contains the MD5 checksum for above binary files. After downloading all the files, type "md5sum -c checksums.md5" can help you verify if the downloaded files are ok.

-Source codes
  manifest.xml		Saving the GIT commit number of each project used in this build.

-Android package mode tarball
  - setup_android.sh                                 :Script help to setup Android code base
  - android_patches.tgz                              :Marvell patches to Android Projects
  - android_src.tgz                                  :Source code for projects added by Marvell
  - marvell_manifest.xml                             :Manifest xml file to download Android eclair as a base
  - kernel_patches.tgz                               :Marvell patches to kernel_src.tgz 
  - kernel_src.tgz                                   :Kernel base source code
  - uboot_patches.tgz                                :Marvell patches to uboot_src.tgz
  - uboot_src.tgz                                    :Uboot base source code 
  - obm_src.tgz                                      :OBM source code

-droid-gcc folder
 Files under droid-gcc folder are built with android-toolchain.
 If this folder is missing, it means that this package wasn't built with android  gcc toolchain.
 root_nfs_internal.tgz 	used for mmc and nfs case

-mrvl-gcc folder
 Files under mrvl-gcc folder are built with marvell gcc toolchain.
 If this folder is missed, it means that this package wasn't built with marvell gcc toolchain.
 
-OBM and UBoot
 
  u-boot.bin				uboot for dkb
  Arbel.bin				CP Arbel image
  TTC1_M06_AI_A0_Flash.bin		CP MSA image
  ReliableData.bin                      IMEI
  
-Kernel and Modules for Android [Currently for TTC/TD, zImage.android.slc and zImage.android.mmc is same]
  zImage.android.slc	Kernel image to boot android from SLC. A root file system is built in. 
  zImage.android.mmc    Kernel image for mmc and nfs usage

-Android File Systems
  system.img		 Android system image for  file system.
  userdata.img		 Android userdata image for  file system.
  ramdisk.img		 Android root image for file system.
  pxafs.img		 AP telephony image.
  ramdisk-recovery.img   Recovery ramdisk

-Software_Downloader.zip                            :Software downloader

Burn binaries with SWD
======================
Burn following binaries to flash by using Software Downloader. Please see <TVTD_DKB3_0_SWDownloader_GUI_User_Guide.doc>
. Please see next part to know how to enter software downloader mode.
1)       Please check your board, if the nand ID is JY504 (CS1), you can choose the configuration file:
TVTD_DKB3_0_Linux_Beta3_JY504_JY454.blf
2)       if the nand ID is JY345(CS2), you can choose the configuration file:
TVTD_DKB3_0_Linux_Beta3_JW345.blf
3)       if the nand ID is Hynix 4G, you can choose the configuration file:
TVTD_DKB3_0_Linux_Beta3_Hynix4G.blf
4)       if the nand ID is Micron 4G, you can choose the configuration file:
TVTD_DKB3_0_Linux_Beta3_Micron4G.blf

        TVTD_DKB3_0_Loader_3_2_13_LINUX.bin                     --> flash address 0x40000
        u-boot.bin                                              --> flash address 0x80000
        ramdisk.img                                             --> flash address 0x100000 [ramdisk_no_gui.img --> flash addr
ess 0x100000: used for audio/RF calibration]
        ReliableData.bin                                        --> flash address 0x140000
        Arbel.bin                                               --> flash address 0x180000
        TTC1_M06_AI_A0_Flash.bin                                --> flash address 0x880000
        zImage                                                  --> flash address 0x980000
        system.img                                              --> flash address 0x3bc0000
        userdata.img                                            --> flash address 0xabc0000
        pxafs.img                                               --> flash address 0xebc0000

If you want recovery to be functional, you have to burn the below images together:
        ramdisk-recovery.img                                    --> flash address 0xf80000
        zImage-mt                                               --> flash address 0xc80000 [Currently zImage-mt is same with
zImage, so you can get a copy of zImage and rename to "zImage-mt"]
You'd better make a clean erase of nand flash before burning.

Boot Android or enter different mode
=====================================
1) default. No key is pressed when power on, enter normal Android
2) HOME+POWER -->Enter Recovery Mode
3) CAM1+POWER -->Enter Fastboot Mode
4) BACK+POWER -->Enter Software Downloader Mode

Use TFTP to erase or reburn specific binaries 
=============================================
	
1.Start your favorite terminal emulator with the appropriate 
      COM port set to 115200,8N1. Power on hte board and wait for TTC_DKB>> prompt to appear

2.Enter the following command to upload the kernel into the RAM and burn into flash:
For NAND flash, issue the following commands:
TTC_DKB>>nand erase 0x980000 0x300000
TTC_DKB>>tftp 0x1000000 zImage
TTC_DKB>>nand write 0x1000000 0x980000 0x300000
Note 1: All the following images should copy to the host tftp share directory:
	zImage
	system.img
	userdata.img
	pxafs.img
Note 2: You need to first input "sw" to switch to usb eth, and then, input "tftp 0x1000000 zImage", then connect the USB micro-line between the host PC and the dkbboard
Note 3: You need to configure the host network interface:
   # ifconfig usb0 192.168.1.100 
Note 4: If you want to boot from nand flash. You have to burn ramdisk. Otherwise if will boot from MMC or NFS
	You can burn ramdisk by tftp too.
TTC_DKB>>nand erase 0x100000 0x40000
TTC_DKB>>tftp 0x1000000 ramdisk.img
TTC_DKB>>nand write 0x1000000 0x100000 0x40000

3.Enter the following command to upload the system.img into the RAM and burn into flash:
For NAND flash, issue the following commands:
TTC_DKB>>nand erase 0x03bc0000 0x7000000
TTC_DKB>>tftp 0x1000000 system.img
TTC_DKB>>nand write.yaffs 0x1000000 0x03bc0000 <system.img actual length> (Note: ony hex supported)

4.Enter the following command to upload the userata.img into the RAM and burn into flash:
For NAND flash, issue the following commands:
TTC_DKB>>nand erase 0x0abc0000 0x4000000
TTC_DKB>>tftp 0x1000000 userdata.img
TTC_DKB>>nand write.yaffs 0x1000000 0x0abc0000 <userdata.img actual length> (Note: ony hex supported)

5.Enter the following command to upload the marvell data into the RAM and burn into flash:
For NAND flash, issue the following commands:
TTC_DKB>>nand erase 0xebc0000 0xf40000
TTC_DKB>>tftp 0x1000000  pxafs.img
TTC_DKB>>nand write.yaffs 0x1000000 0xebc0000 <pxafs.img actual length> (Note: ony hex supported)

6.How to setup nfs
1)  Burn all images except for ramdisk.img. [zImage.android.mmc can be used]
2)  Setup nfs on host. Host ip is 192.168.1.100 and android rootfs should be put to /nfs/android
3)  unzip root_nfs_internal.tgz to /nfs/android
4)  reboot

Use fastboot to erase or reburn specific binaries
=============================================
1.Start your favorite terminal emulator with the appropriate COM port set to 115200,8N1.

2.Make the board enter fastboot mode
There are 2 methods to enter fastboot mode:
(1)Power on the board using CAM1+POWER
(2)Power on the board and wait for TTC_TD>> prompt to appear, then enter the following command:
TTC_TD>>fb

3.Enter the directory containing fastboot (In host PC)
cd <platform>/out/host/linux-x86/bin

4.Enter the following command to burn kernel into flash: (In host PC)
For NAND flash, issue the following commands:
sudo ./fastboot erase kernel
sudo ./fastboot flash kernel <image path>

5.Enter the following command to burn system.img into flash: (In host PC)
For NAND flash, issue the following commands:
sudo ./fastboot erase system
sudo ./fastboot oem onfly system
sudo ./fastboot flash system <image path>

6.Enter the following command to burn userdata.img into flash: (In host PC)
For NAND flash, issue the following commands:
sudo ./fastboot erase userdata
sudo ./fastboot flash userdata <image path>

7.Enter the following command to burn pxafs.img into flash: (In host PC)
For NAND flash, issue the following commands:
sudo ./fastboot erase telephony
sudo ./fastboot flash telephony <image path>

FAQ
=====
+Connection never proceeds beyond the "Verifying user name and password" stage in modem test
--------------------------------------------------------------------------------------------
Update your USB driver on windows PC to the newest version

+Device fail to boot-up, even without console output.
----------------------------------------------------------------
Please make sure ECN001 for "TTC DKB CORECAR V2" is applied, or un-plug the usb cable during boot-up stage

+Wifi can't be enabled if I use a zImage built at the other day.
----------------------------------------------------------------
The wifi kernel module in root_nfs.tgz or system.img may not comply with zImages built at the other day. Please use the zImage and root_nfs.tgz or system.img built at the same day.

+I2C error, and touch may not functional for MMI V2.0
---------------------------------------------------
Please remove camera sensor OV7670, which is located on MMI card

+Phone call is not functional with the auto build package
---------------------------------------------------
WIFI need to be powered on to enable CP phone call, please enable WIFI by "settings-> Wireless & networks -> WIFI(Turn on WIFI)", or directly power on WIFI from console "echo 1 > /sys/class/rfkill/rfkill0/state"

+How to disable GC500 completly
----------------------------------------------------------------
You can do this by: rm /system/lib/egl/egl.cfg, so android UI and 3D applications will use SW version instead of GC500. To save 16MB from GC500 low level driver, you can: rm /system/lib/modules/galcore.ko

+"waiting for device" error when using fastboot to burn images
----------------------------------------------------------------
You should use root permission to execute fastboot, e.g.: sudo fastboot erase kernel
