Files in this folder
====================
  checksums.md5 This file contains the MD5 checksum for above binary files. After downloading all the files, type "md5sum -c checksums.md5" can help you verify if the downloaded files are ok.

-Source Code
  setup_android.sh  The script that is used to setup the code base of this build from the below tarball. For details about this, please refer to release notes.

  kernel_src.tgz        Kernel base source code tar ball.
  kernel_patches.tgz    Kernel patches that are applied on kernel base source.

  marvell_manifest.xml  The manifest file used to download base android source code from google.
  android_src.tgz       The source code of projects that are introduced by Marvell. Not including the projects introduced by Google.
  android_patches.tgz   The patches that applied to android projects introduced by Google.

  uboot_src.tgz         Uboot base source code tar ball.
  uboot_patches.tgz     The patches that applied to uboot base source.

  obm_src.tgz           OBM source code tar ball. Will be released.
  rdroot.tgz            root dir before ramdisk is loaded, used to build kernel.

-Prebuilt Images
  dtim_platform_primary.bin
  dtim_platform_recovery.bin
  MMP3_LINUX_ARM_NTZ.bin
  MMP3_LINUX_ARM_NTZ_backup.bin
  tim_mk2-1063-1063-532-532-399-399-399-200__4_1_sm_noch2_400_1250mv_backup.bin
  tim_mk2-1063-1063-532-532-399-399-399-200__4_1_sm_noch2_400_1250mv_primary.bin
  tim_mk2-1196-1196-598-598-399-399-399-200__1p2g_1_sm_noch2_400_1325mv_backup.bin
  tim_mk2-1196-1196-598-598-399-399-399-200__1p2g_1_sm_noch2_400_1325mv_primary.bin
  tim/tim_mk2-1063-1063-532-532-399-399-399-200__4_1_sm_400_1275mv_backup_b0p.txt
  tim/tim_mk2-1063-1063-532-532-399-399-399-200__4_1_sm_400_1275mv_primary_b0p.txt
  tim/tim_mk2-1196-1196-598-598-399-399-399-200__1p2g_1_sm_400_1275mv_backup_b0p.txt
  tim/tim_mk2-1196-1196-598-598-399-399-399-200__1p2g_1_sm_400_1275mv_primary_b0p.txt
  Wtm_rel_mmp3.bin          Wtm image
  Wtm_rel_mmp3_backup.bin   Wtm image for recovery
  u-boot.bin                uboot image
  u-boot_recovery.bin       uboot image for recovery
  primary_gpt_8g            Primary partition table
  secondary_gpt_8g          Secondary partition table
  uImage.smp                Kernel image
  uImage_recovery.smp       Kernel image for recovery
  ramdisk.img               ramdisk image
  ramdisk_recovery.img      ramdisk image for recovery
  system.img                system image for release
  userdata.img              user data image
  symbols_lib.tgz           all libs with symbols, can be used in debugging crash log

How to use the Patch-based Source Code to build android
=======================================================
 1 .Setting Up the Android Working Directory

    Use the steps that follow to set up the code base.
      note:Check the version of your Git. You can do this by typing git version. If the Git version is 1.6.x.x. You can go ahead with it.

           If the Git version is 1.7.1.x or later, open the ~/.gitconfig file and add the following section:
           [am]
               keepcr=true

           If the Git version is 1.7.0.x, upgrade your Git to a version later than 1.7.1.x. You can download the package from http://git-scm.com/download.
    
   1)Unpack source archive
     $ cat mk2_Android_Platform_beta_src.0? > source-by-patch.tgz
     $ tar xzvf source-by-patch.tgz 
   2)Go to http://source.android.com to download the "repo" tool and set up the build environment for Android.
   3)Create the Android working directory and download the initial code base.
     $ mkdir <android_working_dir>
     $ cd <android_working_dir>
     $ repo init -u https://android.googlesource.com/platform/manifest -b master
   4)Switch the code base specified by marvell_manifest.xml.
     $ cp <source-by-patch>/marvell_manifest.xml .repo/manifests/
     $ repo init -m marvell_manifest.xml
     $ repo sync
   5)Apply the Marvell patches:
     $ cd <source-by-patch>
     $ ./setup_android.sh <android_working_dir>

2. Building the Source Code
   Use the steps that follow to build Android.
   0)Setup Compiling Environment
     $ cd <android_working_dir>  
     $ source build/envsetup.sh
     $ chooseproduct mk2

   1)Build the kernel and modules:
     $ cd <android_working_dir>
     $ cd kernel
     $ make all
     uImage is located at kernel/out, modules is located at kernel/out/modules

   2)Build android:
     $ choosevariant <build variant> //Select "user" as the build variant if you are a normal user. Select "userdebug" or       "eng" to specify what you want to do.
     $ export ANDROID_PREBUILT_MODULES=kernel/out/modules
     $ make

   3)Build U-Boot
     $ cd <android_working_dir>/boot  
     $ make all

   The android ramdisk.img, system.img and userdata.img are located at out/target/product/mk2

Burning OBM and Uboot
=====================
0. If you don't want to fuse the chip, please choose images from prebuilt/emmc/.
   Otherwise, please choose images from prebuilt/emmc/PB_JO/.
   Run PRE_SetupClocks.xdb before you burn mk2 devices that have been fused.
   Run print_MMP3_FuseVal.xdb to check the status of a fused mk2 devices.
1. Install the latest XDB with version 5.1 or later (\\Sh-fs03\debugger_public\Official_Release\eXtreme_Debugger_*)
2. Get the boot binaries (uboot & obm) from autobuild server
3. Flash OBM and U-boot into EMMC using XDB
   Note: Don't check the option "erase affected blocks" when you burn images.
   1)Use flash burn tool: flash --> burn flash
   2)Choose flash: EMMC Flash
   3)Erase All Blocks
   4)Burn Date Files as follows:
     Choose partition 0x0,burn:
     (1)  dtim_platform_primary.bin     address [0x780000]
     (2)  dtim_platform_recovery.bin    address [0x880000]
     (3)  uImage.smp                    address [0x980000]
     (4)  uImage_recovery.smp           address [0x1980000]
     (5)  ramdisk.img                   address [0x1180000]
     (6)  ramdisk_recovery.img          address [0x2180000]
     Choose partition 0x1
     (1)  tim_mk2-1063-1063-532-532-399-399-399-200__4_1_sm_noch2_400_1250mv_primary.bin    OR
          tim_mk2-1196-1196-598-598-399-399-399-200__1p2g_1_sm_noch2_400_1325mv_primary.bin OR
          tim_mk2-1063-1063-532-532-399-399-399-200__4_1_sm_400_1275mv_primary_b0p.bin      OR
          tim_mk2-1196-1196-598-598-399-399-399-200__1p2g_1_sm_400_1275mv_primary_b0p.bin   address [0x0]
          Please be sure that you use primary-backup pairs!
     (2)  Wtm_rel_mmp3.bin                       address [0x4000]
     (3)  MMP3_LINUX_ARM_NTZ.bin                 address [0x2C000]
     (4)  u-boot.bin                             address [0x80000]
     Choose partition 0x2
     (1)  tim_mk2-1063-1063-532-532-399-399-399-200__4_1_sm_noch2_400_1250mv_backup.bin     OR
          tim_mk2-1196-1196-598-598-399-399-399-200__1p2g_1_sm_noch2_400_1325mv_backup.bin  OR
          tim_mk2-1063-1063-532-532-399-399-399-200__4_1_sm_400_1275mv_backup_b0p.bin       OR
          tim_mk2-1196-1196-598-598-399-399-399-200__1p2g_1_sm_400_1275mv_backup_b0p.bin    address [0x0]
     (2)  Wtm_rel_mmp3_backup.bin                address [0x4000]
     (3)  MMP3_LINUX_ARM_NTZ_backup.bin          address [0x2C000]
     (4)  u-boot_recovery.bin                    address [0x80000]

Boot up Android on eMMC
=====================================

Boot the device, and enter the uboot menu.

0) By default, the initial device is set to eMMC.
   You can run the following struction to make sure:
>> setenv autostart no

1) Partition table
>> tftpboot 0x1100000 primary_gpt_16g
>> mmc write 0x1100000 0 0x22
>> tftpboot 0x1100000 secondary_gpt_16g
>> mmc write 0x1100000 0x1DA9FDF 0x21

Please ignore only the following error, since it's not an actual error.
----------error begins----------------
Wrong Image Format for tftpboot command
ERROR: can't get kernel image
----------error ends------------------

2) system
>> tftpboot 0x1100000 system.img
>> unsparse mmc 0 0x1100000 0x2AB80000 0x20000000

3) user data
>> tftpboot 0x1100000 userdata.img
>> unsparse mmc 0 0x1100000 0x4AB80000 0x9FFFC000

After done, power-off and power-on again to boot mmp3 from emmc.

If you're bothered by so many commands, combine them together with the seperator ';'.
