Files in this folder
====================
-Change logs and checksum file
  changelog.day		GIT change log of each project since yesterday.
  changelog.week		GIT change log of each project since last week.
  changelog.biweek 	GIT change log of each project since 2 weeks ago.
  changelog.month		GIT change log of each project since a month ago.

  checksums.md5		This file contains the MD5 checksum for above binary files. After downloading all the files, type "md5sum -c checksums.md5" can help you verify if the downloaded files are ok.

-Source codes
  manifest.xml		Saving the GIT commit number of each project used in this build.
  kernel_src.tgz	Kernel source code tar ball.
  droid_src.tgz		Android source code tar ball without code of Marvell developed application.
  drivers_src.tgz	Source code tar ball for drivers, such as gc, wifi etc
  boot_src.tgz		Uboot and OBM source code tar ball

-droid-gcc folder
 Files under droid-gcc folder are built with android-toolchain.
 If this folder is missing, it means that this package wasn't built with marvell gcc toolchain.

-mrvl-gcc folder
 Files under mrvl-gcc folder are built with marvell gcc toolchain.
 If this folder is missed, it means that this package wasn't built with marvell gcc toolchain.
 
-OBM and UBoot
  ASPN_NTLOADER.bin	NTLoader for avlite
  u-boot.bin		uboot for avlite

  NTIM_OBM_uboot_ASPEN_Mode2.bin	Core 624mhz with 624mhz DDR
  NTIM_OBM_uboot_ASPEN_Mode3.bin	Core 800mhz with 800mhz DDR (This is recommended to be used with AV-Lite 1.5Q board)
  NTIM_OBM_uboot_ASPEN_Mode5.bin	Core 1.2Ghz with 800mhz DDR

-Kernel and Modules for Android
  zImage.android.mlc	Kernel image to boot android from MLC. A root file system is built in. The root file system also packaged as root_android_mlc.tgz
  zImage.android.mmc	Kernel image to boot android from SD card.

  modules_android_mlc.tgz Kernel modules that built along with zImage.android.mlc
  modules_android_mmc.tgz Kernel modules that built along with zImage.android.mmc

  root_android_mlc.tgz	The root directory used to build zImage.android.mlc

-Kernel and Modules for Maemo
  zImage.maemo.mlc	Kernel image to boot Maemo from MLC.
  modules_maemo_mlc.tgz	Kernel modules that built along with zImage.maemo.mlc

-Android File Systems
  root_nfs_xxx.tgz		Android root file system that can be run on SD card or NFS. Be notes, modules in modules_android_mmc.tgz are used in this package. 
 
  system_ubi_xxx.img		Android system image for UBI file system.
  userdata_ubi_xxx.img	    Android userdata image for UBI file system.

  if xxx is "internal" means everything is built in the package, and should be used internally.

  if xxx is "external" means the package can be delivered outside, components with license issue has been removed. Currently helix and adobe flash is removed.

-Extra Libraries
   helix.tgz    Helix libraries. Refer to below for installing helix libraries.
   flash.tgz    Adobe Flash plugin library. Refer to below for installing adobe flash plugin.

Install Helix Libraries
=======================
. Android is running from SD card
  a) plug the SD card to a PC
  b) untar helix.tgz and copy files to /system/lib/helix/

. Android is running from MLC nand
  a) untar helix.tgz
  b) adb shell
  c) su; mount -o remount ubi0_0 /system;
  d) mkdir /system/lib/helix; exit
  e) cd <helix folder>;
  f) for file in $(ls); do adb push $(file) /system/lib/helix/; done

Notes:If you are using Windows host, you can install the cygwin which has the capability to run the last shell script.
   Or you can put the below lines into a BAT file:
   
   @echo off
   FOR %%file in (*.*) DO adb push "%%file" /system/lib/helix/

   You should run the BAT file in the folder where helix libraries locate.

Install Adobe Flash plugin
==========================
. Android is running from SD card
  a) plug the SD card to a PC
  b) untar flash.tgz and copy files to /system/lib/netscape/

. Android is running from MLC nand
  a) untar flash.tgz
  b) adb shell
  c) su; mount -o remount ubi0_0 system;
  d) mkdir /system/lib/netscape; exit
  d) adb push libflashplayer.so /system/lib/netscape/
  
Burning OBM and UBoot
=====================
1. install XDB 4.1.1 from: \\sh1sbak009\Product_Integration\Tools\eXtreme_Debugger_v4.1.1
2. Burn OBM and U-boot by XDB
   1) Use flash burn tool: flash --> burn flash, select: board -- aspen, and flash type - nand
   2) Reset "bad block" table and Erase all
   3) burn file "NTIM_OBM_uboot_ASPEN_Mode3.bin"--> 0x0
   4) burn file "ASPEN_NTLOADER.bin"		--> 0x20000
   5) burn file "u-boot.bin"			--> 0x40000


Setup Android on NAND(MLC)
=========================
Follow the below process and address to burn the zImage and system_ubi and userdata_ubi images.
Boot the device with console,

Avengers>> nand device 1
Avengers>> tftp 0x500000 zImage.android.mlc
Avengers>> nand erase 0x100000 0x300000
Avengers>> nand write 0x500000 0x80000 0x300000 
Avengers>> nand device 1
Avengers>> bbt init nand
Avengers>> tftp 0x1000000 system_ubi.img
Avengers>> nand erase 0x800000 0x8000000
Avengers>> nand write 0x1000000 0x800000 <size of loaded UBI image>
Avengers>> tftp 0x1000000 userdata_ubi.img
Avengers>> nand erase 0x8800000 0x13800000
Avengers>> nand write 0x1000000 0x8800000 <size of loaded UBI image>

After tftp an image to device, please remember the size of the image printed by the command. This size will be used in the followed nand write command.

Notes: the above commands will burn zImage to SLC, system_ubi and userdata_ubi to MLC.


Setup Android on SD Card
========================
Follow the below process to make a SD card with Android root file system installed.
1) Plug a SD card to the PC
2) mkfs.ext3 /dev/sdc #your SD card maybe mounted at the other sd device, such as /dev/sdb
3) mount /dev/sdc /mnt/disk
4) tar xvf root_nfs.tgz /tmp; cp -p -r /tmp/root_nfs/* /mnt/disk/;
5) umount /dev/sdc

Second, burning the zImage.android.mmc image.
Boot the device with console,
Avengers>> nand device 0
Avengers>> tftp 0x500000 zImage.android.mmc
Avengers>> nand erase 0x100000 0x300000
Avengers>> nand write 0x500000 0x80000 0x300000 


Setup Android on NFS
====================
1) Installed the NFS server on PC host. We prefer to use UBuntu8.04 or 8.10. 9.04 is not recommended.
2) mkdir /srv
3) add below line to /etc/exports
  /srv            *(rw,sync,no_root_squash,no_subtree_check)
  Notes: be sure you specify all the optional paramters above.
4) tar xvf root_nfs.tgz /tmp/
5) mv /tmp/root_nfs/* /srv/nfs/

Last, you should use zImage.android.mmc to boot the kernel and then set the bootargs variable in UBoot.
(Notes:if adb is enabled in the kernel, this way doesn't work as the usb net won't work as the usb is used for adb)

Avengers>>tftp zImage.android.mmc
Avengers>>setenv bootargs root=/dev/nfs nfsroot=192.168.1.100:/srv/nfs/,nolock,rsize=1024,wsize=1024 ip=192.168.1.101:192.168.1.100::255.255.255.0::usb0:on console=ttyS1,115200 mem=256M uart_dma init=/init android
Avengers>>saveenv
Avengers>>boot

Notes:if you are using a different host ip address and exported a different NFS directory, you should change the above command line accordingly.

Notes:You only need use setenv and savenv command one time. Next time UBoot will load the environment variable from NAND automaticllay. But later if you want use zImage.android.mmc to boot Android from SD card, you should clear the "bootargs" environment variable. You can do this by:

Avengers>>setenv bootargs
Avengers>>saveenv
Avengers>>printenv 

printenv will list all the environment variables, which can be used to verify what current value of bootargs is.


Known Issues about running Android on NFS
=========================================
+ Wifi can't be enabled if you are using UBuntu9.04 or higher
-------------------------------------------------------------
  Symptom: When you enabled the Wifi, use the logcat you can see a message "Error changing group ownership of wpa_supplicant.conf to 1001:Operation not permitted." This only happens if your host PC is running with UBuntu9.04. We tested UBuntu8.04 and UBuntu8.10, which doesn't have this issue.
  Reason: We don't know the exact reason why chown doesn't work on UBuntu9.04 but works on 8.04 or 8.10.

  Workaround:In the console, you can copy the wpa_supplicant.conf from /system/etc/wifi/wpa_supplicant.conf to /data/misc/wifi/wpa_supplicant.conf and chmod 777 wpa_supplicant.conf.


+ Calibration data can't be saved, any setting data can't be saved.
------------------------------------------------------------------
  Symptom: You calibrate the touch screen with Calibration app, and the screen works well. But at next boot, you have to calibrate it again. The calibration data isn't stored. 

  Reason: Actually the calibration data is saved to persistent property file. But just fail to read it from persistent property at boot. This seems a limitation of NFS file system on support opendir() function.

  Workaround: no workaround is available right now, just recalibrate it.


+Media on SD Card can't be seen by Video/Music/Photo App
------------------------------------------------------------
  Symptom: Plug the SD card to device, with media files on SD card, but Video/Music/Photo App can't see anything.
  Reason: Mounting SD card is disabled in root_nfs.tgz on purpose. As if Android is running on SD card, enable mounting of SD card may cause confliction. So by default we disable it in root_nfs.tgz. 
  Workaround:You can enable it manually by edit /system/etc/vold.conf, uncomment the section of volume_sdcard.

FAQ
=====
+Wifi can't be enabled if I use a zImage built at the other day.
----------------------------------------------------------------
The wifi kernel module in root_nfs.tgz or system_ubi.img may not comply with zImages built at the other day. Please use the zImage and root_nfs.tgz or system_ubi.img built at the same day.


+How can I disable GC300 copybit engine completely?
---------------------------------------------------
You can do this by: rm /system/lib/hw/copybit.default.so, so that Android GUI system won't use GC300 copybit engine. 
But the built-in media playback engine will still try to use GC300 copybit engine to do resizing and color conversion. Check the topic "How can I disable GC300 copybit engine on video playback?".


+How can I disable GC300 copybit engine on video playback?
---------------------------------------------------------------
You can do this by: rm /system/lib/libopencorehw.so . Once this file is deleted, OpenCore uses SW resizing and color coversion module to resize and conver the YUV video to RGB.

Second, you should "setprop debug.disable.pmem.output 1", so that GStreamer and Helix will use SW resizing and color conversion module.


+How to modify the files after the system_ubi.img has been burned to the flash?
-------------------------------------------------------------------------------
In the console mode, you can remount the /system folder by
$mount -o remount -t ubifs ubi0_0 /system

+How to enable the video playback profiling?
--------------------------------------------
After the android boot up, type in console:
$setprop enable.pvplayer.profiling 1
$logcat &

While playback a video clip, the profiling data will be output to console.

+How to enable the fake ac and battery status?
----------------------------------------------
If the battery service reports wrong battery status, Android power off the system automatically. You can use the below way to request battery service to report fake status to cheat android system.

Open /init.rc, add the below line before class_start default:
setprop battery.fake_ac true






